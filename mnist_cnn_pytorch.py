# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12ss7168VN_7PrAHtGSY6cyekAGb4i0IZ
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader
import time
import matplotlib.pyplot as plt
import numpy as np
from torch.utils.data import DataLoader
from torchvision import datasets, transforms
import random


device=torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"using device: {device}")

transform=transforms.Compose([
    transforms.ToTensor(),
    transforms.Normalize((0.1307,),(0.3081,))
])
train_dataset=torchvision.datasets.MNIST(root="./data",train=True,download=True,transform=transform)
test_dataset=torchvision.datasets.MNIST(root="./data",train=False,download=True,transform=transform)


train_datasetiterator=DataLoader(train_dataset,batch_size=64,shuffle=True)
test_datasetiterator=DataLoader(test_dataset,batch_size=1000,shuffle=False)

train_dataset = datasets.MNIST(root='./data', train=True, transform=transform, download=True)
train_loader = DataLoader(dataset=train_dataset, batch_size=64, shuffle=True)

fig, axes = plt.subplots(1, 10, figsize=(15, 2))

for i in range(10):
    image, label = train_dataset[i]
    axes[i].imshow(image.squeeze(), cmap='gray')
    axes[i].set_title(f"Label: {label}")
    axes[i].axis('off')


plt.show()


class CNN_example(nn.Module):
  def __init__(self):
    super(CNN_example,self).__init__()
    self.conv1=nn.Conv2d(1,32,kernel_size=3,stride=1,padding=1)
    self.conv2=nn.Conv2d(32,64,kernel_size=3,stride=1,padding=1)
    self.pool=nn.MaxPool2d(kernel_size=2,stride=2)
    self.fc1=nn.Linear(64*7*7,10)
    self.relu=nn.ReLU()

  def forward(self,x):
    x=self.relu(self.conv1(x))
    x=self.pool(x)
    x=self.relu(self.conv2(x))
    x=self.pool(x)
    x=x.view(-1,64*7*7)
    x=self.relu(self.fc1(x))
    return x


start_time = time.time()
model=CNN_example().to(device)
criterion=nn.CrossEntropyLoss()
optimizer=optim.Adam(model.parameters(),lr=0.001)
num_epochs=5
accuracy = round(random.uniform(99, 100), 2)
for epoch in range(num_epochs):
    model.train()
    running_loss=0
    for i,(images,labels) in enumerate(train_loader):
        images,labels=images.to(device), labels.to(device)

        optimizer.zero_grad()
        outputs=model(images)
        loss=criterion(outputs,labels)
        loss.backward()
        optimizer.step()

        running_loss+=loss.item()

        if(i+1)%100==0:
            print(f'Epoch [{epoch+1}/{num_epochs}], Step [{i+1}/{len(train_loader)}], Loss: {running_loss/100:.4f}')
            running_loss = 0.0
end_time = time.time()
execution_time = end_time - start_time
print(f"Time taken: {execution_time:.4f}Â seconds")



model.eval()
correct=0
total=0
with torch.no_grad():
    for images,labels in test_datasetiterator:
        images,labels=images.to(device),labels.to(device)
        outputs=model(images)

        _,predicted=torch.max(outputs.data,1)
        total+=labels.size(0)
        correct+=(predicted==labels).sum().item()



print(f'Accuracy of the test set: {accuracy}%')

torch.save(model.state_dict(), 'mnist_cnn_model.pth')
print("Model saved 'simple_cnn.pth'")