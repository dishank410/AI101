# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/14SC7oH3XXA3JTwQmyr027KgzcAaGixQO
"""

import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression
from sklearn.pipeline import make_pipeline

# Parameters for the cubic model
a = -0.5  # Cubic coefficient
b = -1.5  # Quadratic coefficient
c = 2     # Linear coefficient
d = 3     # Intercept
sigma = 10 # Standard deviation of the error term

# Generate random data
np.random.seed(42)  # For reproducibility
x = np.linspace(0, 10, 100).reshape(-1, 1)
error = np.random.normal(0, sigma, size=len(x))
y = a * x.ravel()**3 + b * x.ravel()**2 + c * x.ravel() + d + error

# Create a function to perform polynomial regression and plot the curves
def plot_polynomial_fit(degree, x, y, title):
    model = make_pipeline(PolynomialFeatures(degree), LinearRegression())
    model.fit(x, y)
    y_pred = model.predict(x)

    plt.plot(x, y, 'bo', label='Data')  # Plot original data
    plt.plot(x, y_pred, 'r-', label=f'Poly degree {degree}')  # Plot fitted curve
    plt.title(title)
    plt.xlabel('x')
    plt.ylabel('y')
    plt.legend(loc='best')
    plt.grid(True)

# Create plots for underfitting, proper fitting, and overfitting

# Underfitting with degree 1 (linear)
plt.figure(figsize=(12, 4))
plt.subplot(131)
plot_polynomial_fit(1, x, y, 'Underfit Curve (Degree 1)')

# Proper fit with degree 3 (cubic)
plt.subplot(132)
plot_polynomial_fit(3, x, y, 'Proper Fit Curve (Degree 3)')

# Overfitting with degree 15 (very high degree)
plt.subplot(133)
plot_polynomial_fit(30, x, y, 'Overfit Curve (Degree 30)')

# Show all the plots
plt.tight_layout()
plt.show()